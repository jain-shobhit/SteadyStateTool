function X = S11(model)
% This function assembles the quadratic nonlinearities for the curved beam
% example.

E = model.E;
A = model.A;
dx = model.dx;
P = cell(1,6); 

P{1} =...
[ 0,                 0,              0, 0,                 0,              0;...
  0, -(3*A*E)/(5*dx^2), -(A*E)/(20*dx), 0,  (3*A*E)/(5*dx^2), -(A*E)/(20*dx);...
  0,    -(A*E)/(20*dx),      -(A*E)/15, 0,     (A*E)/(20*dx),       (A*E)/60;...
  0,                 0,              0, 0,                 0,              0;...
  0,  (3*A*E)/(5*dx^2),  (A*E)/(20*dx), 0, -(3*A*E)/(5*dx^2),  (A*E)/(20*dx);...
  0,    -(A*E)/(20*dx),       (A*E)/60, 0,     (A*E)/(20*dx),      -(A*E)/15];

P{2} =...
[                 0, -(3*A*E)/(5*dx^2), -(A*E)/(20*dx),                 0,  (3*A*E)/(5*dx^2), -(A*E)/(20*dx);...
  -(3*A*E)/(5*dx^2),                 0,              0,  (3*A*E)/(5*dx^2),                 0,              0;...
     -(A*E)/(20*dx),                 0,              0,     (A*E)/(20*dx),                 0,              0;...
                  0,  (3*A*E)/(5*dx^2),  (A*E)/(20*dx),                 0, -(3*A*E)/(5*dx^2),  (A*E)/(20*dx);...
   (3*A*E)/(5*dx^2),                 0,              0, -(3*A*E)/(5*dx^2),                 0,              0;...
     -(A*E)/(20*dx),                 0,              0,     (A*E)/(20*dx),                 0,              0];    

 P{3} = ...
[              0, -(A*E)/(20*dx), -(A*E)/15,              0,  (A*E)/(20*dx),  (A*E)/60;...
  -(A*E)/(20*dx),              0,         0,  (A*E)/(20*dx),              0,         0;...
       -(A*E)/15,              0,         0,       (A*E)/15,              0,         0;...
               0,  (A*E)/(20*dx),  (A*E)/15,              0, -(A*E)/(20*dx), -(A*E)/60;...
   (A*E)/(20*dx),              0,         0, -(A*E)/(20*dx),              0,         0;...
        (A*E)/60,              0,         0,      -(A*E)/60,              0,         0];    

P{4} = ...
[ 0,                 0,              0, 0,                 0,              0;...
  0,  (3*A*E)/(5*dx^2),  (A*E)/(20*dx), 0, -(3*A*E)/(5*dx^2),  (A*E)/(20*dx);...
  0,     (A*E)/(20*dx),       (A*E)/15, 0,    -(A*E)/(20*dx),      -(A*E)/60;...
  0,                 0,              0, 0,                 0,              0;...
  0, -(3*A*E)/(5*dx^2), -(A*E)/(20*dx), 0,  (3*A*E)/(5*dx^2), -(A*E)/(20*dx);...
  0,     (A*E)/(20*dx),      -(A*E)/60, 0,    -(A*E)/(20*dx),       (A*E)/15];  

P{5} = ...
[                 0,  (3*A*E)/(5*dx^2),  (A*E)/(20*dx),                 0, -(3*A*E)/(5*dx^2),  (A*E)/(20*dx);...
   (3*A*E)/(5*dx^2),                 0,              0, -(3*A*E)/(5*dx^2),                 0,              0;...
      (A*E)/(20*dx),                 0,              0,    -(A*E)/(20*dx),                 0,              0;...
                  0, -(3*A*E)/(5*dx^2), -(A*E)/(20*dx),                 0,  (3*A*E)/(5*dx^2), -(A*E)/(20*dx);...
  -(3*A*E)/(5*dx^2),                 0,              0,  (3*A*E)/(5*dx^2),                 0,              0;...
      (A*E)/(20*dx),                 0,              0,    -(A*E)/(20*dx),                 0,              0];

P{6} = ...
[              0, -(A*E)/(20*dx),  (A*E)/60,              0,  (A*E)/(20*dx), -(A*E)/15;...
  -(A*E)/(20*dx),              0,         0,  (A*E)/(20*dx),              0,         0;...
        (A*E)/60,              0,         0,      -(A*E)/60,              0,         0;...
               0,  (A*E)/(20*dx), -(A*E)/60,              0, -(A*E)/(20*dx),  (A*E)/15;...
   (A*E)/(20*dx),              0,         0, -(A*E)/(20*dx),              0,         0;...
       -(A*E)/15,              0,         0,       (A*E)/15,              0,         0];

S = cell(1,model.nDOF);
for i = 1:model.nDOF    
    S{i} = zeros(model.nDOF);
end
for i = 1:model.nElements 
    index = 3*(i-1)+1:3*(i+1);
    Te = compute_rotation_matrix(model.nodes(i:i+1,:));
    for j = 1:6
        PPP = zeros(model.nDOF);
        PPP(index,index) = Te.' * P{j} * Te;
        ii = index(j);
        S{ii} = S{ii}+ PPP;
    end
end

X = cell(1,length(model.freeDOFs));
for j = 1:length(model.freeDOFs)
    i = model.freeDOFs(j);
    AJ = S{i};
    X{j} = AJ(model.freeDOFs,model.freeDOFs);
end

end